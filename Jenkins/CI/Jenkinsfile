pipeline {
    agent any
    environment
    {
        GIT_BRANCH = "main"
        AWS_REGION = "us-east-1"
        awsCredential = "aws-dev"
    }
    stages
    {
        stage("Checkout the source code from Git")
        {
            steps
            {
                script
                {
                    // Check out the code from the GitHub repository
                    git branch: "${env.GIT_BRANCH}", url: "${env.GIT_REPO_URL}"
                }
            }          
        }

        stage("Extract Repository Name") {
            steps {
                script {
                    // Extract the repository name from GIT_URL
                    // Jenkins provides GIT_URL from the webhook
                    // GIT_URL: https://github.com/VilozniDaniel/Microservice1.git
                    repoName = env.GIT_URL.tokenize('/').last().replace('.git', '')
                    echo "Repository Name: ${repoName}" //Microservice1 / Microservice2
                }
            }
        }

        stage("Build Docker Image")
        {
            steps
            {
                script
                {
                    // Build Docker image from the checked-out source code
                    ecrRegistry = "${accountID}.dkr.ecr.${region}.amazonaws.com/Microservices/${repoName}"
                    docker.withRegistry("https://" + ecrRegistry, "ecr:${region}:" + awsCredential)
                    {
                        customImage = docker.build("${repoName}:${env.BUILD_ID}", ".")
                    }
                }
            }
        }
        stage("Push Docker Image to Registry")
        {
            steps
            {
                script
                {
                    // Push the Docker image to ECR
                    docker.withRegistry("https://" + ecrRegistry, "ecr:${region}:" + awsCredential)
                    {
                        customImage.push()
                    }
                }
            }
        }

        stage("CleanUp")
        {
            steps
            {
                script
                {
                    // Clean up all Docker images from the slave
                    sh "docker rmi -f $(docker images -a -q) || true"
                }
            }
        }
    }
    post
    {
        always
        {
            script 
            {
                // Clean up the workspace after the pipeline execution
                cleanWs()
            }

        }
        success
        {
            script
            {
                echo "CI build run successfully: ${env.JOB_NAME} ${repoName} #${env.BUILD_NUMBER}"
            }
        }
        failure
        {
            script
            {
                echo "CI build failed! ${env.JOB_NAME} ${repoName} #${env.BUILD_NUMBER}"
            }
        }
    }
}
